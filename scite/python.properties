# Define SciTE settings for Python files.

file.patterns.py=*.py;*.pyw
file.patterns.scons=SConstruct;SConscript

shbang.python=py

filter.python=Python (py pyw)|$(file.patterns.py)|

lexer.$(file.patterns.py)=python
lexer.$(file.patterns.scons)=python

keywordclass.python2=and as assert break class continue def del elif \
else except exec finally for from global if import in is lambda not \
or pass print raise return try while with yield

keywordclass.python3=False None True and as assert break class continue \
def del elif else except finally for from global if import in is lambda \
nonlocal not or pass print raise return try while with yield len async await

keywordclass.python=$(keywordclass.python3)

# Extra keywords for cython
keywordclass.cython=cdef cimport cpdef

keywords.$(file.patterns.py)=$(keywordclass.python) $(keywordclass.cython)
keywords.$(file.patterns.scons)=$(keywordclass.python)

# If you uncomment the 3 lines below,
# and put some words after "keywordclass2.python=",
# those words will be styled by style.python.14

#keywordclass2.python=
#keywords2.$(file.patterns.py)=$(keywordclass2.python)
#keywords2.$(file.patterns.scons)=$(keywordclass2.python)

#~ statement.indent.$(file.patterns.py)=10 :
statement.indent.$(file.patterns.py)=5 class def elif else except finally \
for if try while with

statement.lookback.$(file.patterns.py)=0
block.start.$(file.patterns.py)=
block.end.$(file.patterns.py)=

view.indentation.examine.*.py=2

#fold.quotes.python=1

comment.block.python=#

indent.python.colon=0

# Python styles
# White space
style.python.0=fore:#ffffff
# Comment
style.python.1=fore:#008080
# Number
style.python.2=$(style.number)
# String
style.python.3=$(style.double.string)
# Single quoted string
style.python.4=$(style.single.string)
# Keyword
style.python.5=$(style.keyword)
# Triple quotes
style.python.6=$(style.comment)
# Triple double quotes
style.python.7=$(style.comment)
# Class name definition
style.python.8=$(style.single.string)
# Function or method name definition
style.python.9=$(style.single.string)
# Operators
style.python.10=$(style.operator)
# Identifiers
style.python.11=$(style.normal)
# Comment-blocks
style.python.12=fore:#7F7F7F
# End of line where string is not closed
style.python.13=fore:#ffffff,back:#ff0000
# Highlighted identifiers
style.python.14=fore:#ffff00
# Decorators
style.python.15=$(style.keyword)
# Matched Operators
# style.python.34=fore:#ff0000
# style.python.35=fore:#ffffff
# Braces are only matched in operator style
braces.python.style=0

if PLAT_WIN
	command.go.*.py=pythonw -u "$(FileNameExt)"
	command.go.subsystem.*.py=1
	command.go.*.pyw=pythonw -u "$(FileNameExt)"
	command.go.subsystem.*.pyw=1
	command.build.SConscript=scons.bat --up .
	command.build.SConstruct=scons.bat .

if PLAT_GTK
	command.go.*.py=python -u "$(FileNameExt)"
	command.build.SConscript=scons --up .
	command.build.SConstruct=scons .

if PLAT_MAC
	command.go.*.py=python -u "$(FileNameExt)"
	command.build.SConscript=scons --up .
	command.build.SConstruct=scons .
